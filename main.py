from modules.geo_api import GeoAPI
from modules.ascii_art import ascii_printer
from modules.log_analyzer import LogAnalyzer

# ------| Lancement du programme |--------------------------
def main_menu():
    ascii_printer()
    api = GeoAPI()

# ------| Menu |--------------------------------------------
    while True:
        print("\n=======| MENU |===================================================\n")
        print("1Ô∏è‚É£   Rechercher la population par code (d√©partement ou commune)")
        print("2Ô∏è‚É£   Traiter un fichier de logs .json")
        print("\n0Ô∏è‚É£   Quitter")
        choice = input("\nüëâ Choix : ").strip()

# ------| Choix 1 |-----------------------------------------
        if choice == "1":
            code = input("\nüëâ Entrez un code (d√©partement √† 2 chiffres ou postal √† 5 chiffres) : ").strip()

            if code.isdigit() and len(code) in [2, 5]:
                population, nom, code_utilise = api.get_population_by_code(code)
                if population:
                    url_cp = f"https://www.code-postal.com/{code_utilise}.html"
                    print(f"\n‚ú≥Ô∏è  Population de {nom} ({code_utilise}) : {population}")
                    print(f"‚ú≥Ô∏è  Plus d'infos ?  {url_cp} (carte de la zone g√©ographique √©xacte de {nom})")
                else:
                    print(f"\n‚ùå Aucune commune trouv√©e pour le code {code_utilise}.\n")
            else:
                print("\n‚ùå Entr√©e invalide. Veuillez entrer un code √† 2 ou 5 chiffres uniquement (d√©partement ou commune).")
        
# ------| Choix 2 |-----------------------------------------
        elif choice == "2":
            path = input("\nüëâ Entrez le chemin du fichier JSON de logs √† analyser (ex : ./data/logs.json) : ").strip()
            analyzer = LogAnalyzer(path)

            if not analyzer.is_valid_path():
                print("\n‚ùå Chemin invalide ou fichier introuvable.")
                continue

            try:
                analyzer.load_logs()
                errors, warnings = analyzer.analyze_logs()
                print(f"\n‚úÖ {len(errors)} erreurs & {len(warnings)} avertissements trouv√©s.")

                export = input("\nüìÅ Voulez-vous exporter ces logs dans un fichier Excel ? (oui/non) : ").strip().lower()
                if export in ["oui", "o", "yes", "y"]:
                    out_path = input("\nüëâ Entrez le chemin de sortie du fichier Excel (ex : ./data/extract.xlsx) : ").strip()
                    try:
                        analyzer.export_to_excel(errors + warnings, out_path)
                        print(f"\n‚úÖ Export termin√© avec succ√®s : {out_path}")
                    except Exception as e:
                        print(f"\n‚ùå Erreur lors de l'export : {e}")
                else:
                    print("\n‚ùå Export annul√© par l'utilisateur.")
            except Exception as e:
                print(f"\n‚ùå Une erreur est survenue pendant l‚Äôanalyse : {e}")

# ------| Choix 0 |------------------------------------------
        elif choice == "0":
            print("\nüëã Au revoir !\n")
            break

# ------| Choix inexistants |--------------------------------
        else:
            print("\n‚ùå Option invalide.")


if __name__ == "__main__":
    main_menu()
